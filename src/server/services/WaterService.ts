import { OnStart, Service } from "@flamework/core";
import { Players, RunService, Workspace } from "@rbxts/services";

@Service()
export class WaterService implements OnStart {
    private readonly WATER_LEVEL = 5; // Nivel constante del agua
    private playersInWater = new Set<Player>();

    onStart(): void {
        this.setupWaterMonitoring();
        print("游깱 WaterService iniciado - Monitoreando flotaci칩n de jugadores");
    }

    private setupWaterMonitoring(): void {
        // Monitorear jugadores en el agua cada frame
        RunService.Heartbeat.Connect(() => {
            Players.GetPlayers().forEach((player) => {
                this.updatePlayerWaterState(player);
            });
        });
    }

    private updatePlayerWaterState(player: Player): void {
        const character = player.Character;
        if (!character) return;

        const humanoidRootPart = character.FindFirstChild("HumanoidRootPart") as Part;
        const humanoid = character.FindFirstChild("Humanoid") as Humanoid;
        
        if (!humanoidRootPart || !humanoid) return;

        const playerY = humanoidRootPart.Position.Y;
        // CORREGIDO: Solo aplicar efectos de nataci칩n si est치 BAJO el nivel del agua
        // Si est치 caminando sobre la superficie (Y >= 5), no es nataci칩n
        const isActuallySwimming = playerY < this.WATER_LEVEL; // Solo si est치 bajo el nivel 5

        if (isActuallySwimming && !this.playersInWater.has(player)) {
            // Jugador acaba de caer bajo el agua (nataci칩n real)
            this.onPlayerEnterWater(player, humanoidRootPart, humanoid);
            this.playersInWater.add(player);
        } else if (!isActuallySwimming && this.playersInWater.has(player)) {
            // Jugador sali칩 del agua o est치 sobre la superficie
            this.onPlayerExitWater(player, humanoidRootPart, humanoid);
            this.playersInWater.delete(player);
        }

        // Si est치 realmente nadando (bajo el agua), aplicar efectos continuos
        if (isActuallySwimming) {
            this.applyWaterEffects(player, humanoidRootPart, humanoid);
        }
    }

    private onPlayerEnterWater(player: Player, rootPart: Part, humanoid: Humanoid): void {
        print(`游끩 ${player.Name} est치 nadando (bajo el agua)`);
        
        // Efectos de entrada al agua - m치s suaves
        humanoid.JumpPower = 25; // Menor poder de salto en agua
        humanoid.WalkSpeed = math.max(6, humanoid.WalkSpeed * 0.5); // Movimiento m치s lento en agua
        
        // Crear efecto de flotaci칩n suave
        const waterFloat = new Instance("BodyVelocity");
        waterFloat.Name = "WaterFloat";
        waterFloat.MaxForce = new Vector3(0, 2000, 0); // Fuerza vertical moderada
        waterFloat.Velocity = new Vector3(0, 5, 0); // Impulso inicial hacia arriba suave
        waterFloat.Parent = rootPart;
    }

    private onPlayerExitWater(player: Player, rootPart: Part, humanoid: Humanoid): void {
        print(`游뛌 ${player.Name} sali칩 del agua`);
        
        // Restaurar valores normales
        humanoid.JumpPower = 50; // Valor normal
        humanoid.WalkSpeed = 16; // Velocidad normal
        
        // Remover efectos de flotaci칩n
        const waterFloat = rootPart.FindFirstChild("WaterFloat");
        if (waterFloat) {
            waterFloat.Destroy();
        }
    }

    private applyWaterEffects(player: Player, rootPart: Part, humanoid: Humanoid): void {
        const waterFloat = rootPart.FindFirstChild("WaterFloat") as BodyVelocity;
        if (!waterFloat) return;

        // Flotaci칩n suave hacia la superficie del agua
        const currentY = rootPart.Position.Y;
        const targetY = this.WATER_LEVEL + 1; // Flotar 1 stud sobre el agua (no muy alto)
        
        if (currentY < targetY) {
            // Aplicar fuerza hacia arriba para flotar suavemente
            const floatForce = (targetY - currentY) * 300; // Fuerza m치s suave
            waterFloat.Velocity = new Vector3(0, math.min(floatForce, 25), 0); // Velocidad m치xima m치s baja
        } else {
            // Si est치 en la superficie, mantener flotaci칩n m칤nima
            waterFloat.Velocity = new Vector3(0, 2, 0); // Flotaci칩n m칤nima
        }
    }

    // M칠todo p칰blico para verificar si un jugador est치 en el agua
    public isPlayerInWater(player: Player): boolean {
        return this.playersInWater.has(player);
    }

    // M칠todo p칰blico para obtener el nivel del agua
    public getWaterLevel(): number {
        return this.WATER_LEVEL;
    }

    // M칠todo para forzar flotaci칩n (usado por barcos y otros objetos)
    public getFloatingHeight(): number {
        return this.WATER_LEVEL + 1; // Altura est치ndar de flotaci칩n ajustada
    }
} 
